/*
 * Note: this file originally auto-generated by mib2c
 * using mfd-data-access.m2c
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "applTable.h"


#include "applTable_data_access.h"

/** @ingroup interface
 * @addtogroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table applTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * NETWORK-SERVICES-MIB::applTable is subid 1 of application.
 * Its status is Current.
 * OID: .1.3.6.1.2.1.27.1, length: 8
*/

/**
 * initialization for applTable data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param applTable_reg
 *        Pointer to applTable_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int
applTable_init_data(applTable_registration * applTable_reg)
{
    DEBUGMSGTL(("verbose:applTable:applTable_init_data","called\n"));

    /*
     * TODO:303:o: Initialize applTable data.
     */

    return MFD_SUCCESS;
} /* applTable_init_data */

/**
 * container overview
 *
 */

/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void
applTable_container_init(netsnmp_container **container_ptr_ptr)
{
    DEBUGMSGTL(("verbose:applTable:applTable_container_init","called\n"));
    
    if (NULL == container_ptr_ptr) {
        snmp_log(LOG_ERR,"bad container param to applTable_container_init\n");
        return;
    }

    /*
     * For advanced users, you can use a custom container. If you
     * do not create one, one will be created for you.
     */
    *container_ptr_ptr = NULL;

} /* applTable_container_init */

/**
 * container shutdown
 *
 * @param container_ptr A pointer to the container.
 *
 *  This function is called at shutdown to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases.
 *
 *  This function is called before applTable_container_free().
 *
 * @remark
 *  This would also be a good place to do any cleanup needed
 *  for you data source. For example, closing a connection to another
 *  process that supplied the data, closing a database, etc.
 */
void
applTable_container_shutdown(netsnmp_container *container_ptr)
{
    DEBUGMSGTL(("verbose:applTable:applTable_container_shutdown","called\n"));
    
    if (NULL == container_ptr) {
        snmp_log(LOG_ERR,"bad params to applTable_container_shutdown\n");
        return;
    }

} /* applTable_container_shutdown */

/**
 * load initial data
 *
 * TODO:350:M: Implement applTable data load
 *
 * @param container container to which items should be inserted
 *
 * @retval MFD_SUCCESS              : success.
 * @retval MFD_RESOURCE_UNAVAILABLE : Can't access data source
 * @retval MFD_ERROR                : other error.
 *
 *  This function is called to load the index(es) (and data, optionally)
 *  for the every row in the data set.
 *
 * @remark
 *  While loading the data, the only important thing is the indexes.
 *  If access to your data is cheap/fast (e.g. you have a pointer to a
 *  structure in memory), it would make sense to update the data here.
 *  If, however, the accessing the data invovles more work (e.g. parsing
 *  some other existing data, or peforming calculations to derive the data),
 *  then you can limit yourself to setting the indexes and saving any
 *  information you will need later. Then use the saved information in
 *  applTable_row_prep() for populating data.
 *
 * @note
 *  If you need consistency between rows (like you want statistics
 *  for each row to be from the same time frame), you should set all
 *  data here.
 *
 */
int
applTable_container_load(netsnmp_container *container)
{
    applTable_rowreq_ctx *rowreq_ctx;
    size_t                 count = 0;

    /*
     * storage for each column
     */
   long   applIndex;

    /*
     * temporary storage for index values
     */
        /*
         * applIndex(1)/INTEGER/ASN_INTEGER/long(long)//l/a/w/e/R/d/h
         */
   long   applIndex;


    DEBUGMSGTL(("verbose:applTable:applTable_container_load","called\n"));

    /*
     * TODO:351:M: |-> Load/update data in the applTable container.
     * loop over your applTable data, allocate a rowreq context,
     * set the index(es) [and data, optionally] and insert into
     * the container.
     */
    while( 1 ) {
        /*
         * check for end of data; bail out if there is no more data
         */
        if( 1 )
            break;

        /*
         * TODO:352:M: |   |-> set indexes in new applTable rowreq context.
         * data context will be set from the param (unless NULL,
         *      in which case a new data context will be allocated)
         */
        rowreq_ctx = applTable_allocate_rowreq_ctx(NULL);
        if (NULL == rowreq_ctx) {
            snmp_log(LOG_ERR, "memory allocation failed\n");
            return MFD_RESOURCE_UNAVAILABLE;
        }
        if(MFD_SUCCESS != applTable_indexes_set(rowreq_ctx
                               , applIndex
               )) {
            snmp_log(LOG_ERR,"error setting index while loading "
                     "applTable data.\n");
            applTable_release_rowreq_ctx(rowreq_ctx);
            continue;
        }

        /*
         * TODO:352:r: |   |-> populate applTable data context.
         * Populate data context here. (optionally, delay until row prep)
         */
    /*
     * TRANSIENT or semi-TRANSIENT data:
     * copy data or save any info needed to do it in row_prep.
     */
    /*
     * setup/save data for applName
     * applName(2)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
     */
    /** no mapping */
    /*
     * make sure there is enough space for applName data
     */
    if ((NULL == rowreq_ctx->data.applName) ||
        (rowreq_ctx->data.applName_len <
         (applName_len* sizeof(applName[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (applName)\n");
        return MFD_ERROR;
    }
    rowreq_ctx->data.applName_len = applName_len* sizeof(applName[0]);
    memcpy( rowreq_ctx->data.applName, applName, applName_len* sizeof(applName[0]) );
    
    /*
     * setup/save data for applDirectoryName
     * applDirectoryName(3)/DistinguishedName/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
     */
    /** no mapping */
    /*
     * make sure there is enough space for applDirectoryName data
     */
    if ((NULL == rowreq_ctx->data.applDirectoryName) ||
        (rowreq_ctx->data.applDirectoryName_len <
         (applDirectoryName_len* sizeof(applDirectoryName[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (applDirectoryName)\n");
        return MFD_ERROR;
    }
    rowreq_ctx->data.applDirectoryName_len = applDirectoryName_len* sizeof(applDirectoryName[0]);
    memcpy( rowreq_ctx->data.applDirectoryName, applDirectoryName, applDirectoryName_len* sizeof(applDirectoryName[0]) );
    
    /*
     * setup/save data for applVersion
     * applVersion(4)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
     */
    /** no mapping */
    /*
     * make sure there is enough space for applVersion data
     */
    if ((NULL == rowreq_ctx->data.applVersion) ||
        (rowreq_ctx->data.applVersion_len <
         (applVersion_len* sizeof(applVersion[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (applVersion)\n");
        return MFD_ERROR;
    }
    rowreq_ctx->data.applVersion_len = applVersion_len* sizeof(applVersion[0]);
    memcpy( rowreq_ctx->data.applVersion, applVersion, applVersion_len* sizeof(applVersion[0]) );
    
    /*
     * setup/save data for applUptime
     * applUptime(5)/TimeStamp/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applUptime = applUptime;
    
    /*
     * setup/save data for applOperStatus
     * applOperStatus(6)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applOperStatus = applOperStatus;
    
    /*
     * setup/save data for applLastChange
     * applLastChange(7)/TimeStamp/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applLastChange = applLastChange;
    
    /*
     * setup/save data for applInboundAssociations
     * applInboundAssociations(8)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applInboundAssociations = applInboundAssociations;
    
    /*
     * setup/save data for applOutboundAssociations
     * applOutboundAssociations(9)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applOutboundAssociations = applOutboundAssociations;
    
    /*
     * setup/save data for applAccumulatedInboundAssociations
     * applAccumulatedInboundAssociations(10)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applAccumulatedInboundAssociations = applAccumulatedInboundAssociations;
    
    /*
     * setup/save data for applAccumulatedOutboundAssociations
     * applAccumulatedOutboundAssociations(11)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applAccumulatedOutboundAssociations = applAccumulatedOutboundAssociations;
    
    /*
     * setup/save data for applLastInboundActivity
     * applLastInboundActivity(12)/TimeStamp/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applLastInboundActivity = applLastInboundActivity;
    
    /*
     * setup/save data for applLastOutboundActivity
     * applLastOutboundActivity(13)/TimeStamp/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applLastOutboundActivity = applLastOutboundActivity;
    
    /*
     * setup/save data for applRejectedInboundAssociations
     * applRejectedInboundAssociations(14)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applRejectedInboundAssociations = applRejectedInboundAssociations;
    
    /*
     * setup/save data for applFailedOutboundAssociations
     * applFailedOutboundAssociations(15)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
     */
    /** no mapping */
    rowreq_ctx->data.applFailedOutboundAssociations = applFailedOutboundAssociations;
    
    /*
     * setup/save data for applDescription
     * applDescription(16)/SnmpAdminString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
     */
    /** no mapping */
    /*
     * make sure there is enough space for applDescription data
     */
    if ((NULL == rowreq_ctx->data.applDescription) ||
        (rowreq_ctx->data.applDescription_len <
         (applDescription_len* sizeof(applDescription[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (applDescription)\n");
        return MFD_ERROR;
    }
    rowreq_ctx->data.applDescription_len = applDescription_len* sizeof(applDescription[0]);
    memcpy( rowreq_ctx->data.applDescription, applDescription, applDescription_len* sizeof(applDescription[0]) );
    
    /*
     * setup/save data for applURL
     * applURL(17)/URLString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
     */
    /** no mapping */
    /*
     * make sure there is enough space for applURL data
     */
    if ((NULL == rowreq_ctx->data.applURL) ||
        (rowreq_ctx->data.applURL_len <
         (applURL_len* sizeof(applURL[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (applURL)\n");
        return MFD_ERROR;
    }
    rowreq_ctx->data.applURL_len = applURL_len* sizeof(applURL[0]);
    memcpy( rowreq_ctx->data.applURL, applURL, applURL_len* sizeof(applURL[0]) );
    
        
        /*
         * insert into table container
         */
        CONTAINER_INSERT(container, rowreq_ctx);
        ++count;
    }

    DEBUGMSGT(("verbose:applTable:applTable_container_load",
               "inserted %" NETSNMP_PRIz "u records\n", count));

    return MFD_SUCCESS;
} /* applTable_container_load */

/**
 * container clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void
applTable_container_free(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:applTable:applTable_container_free","called\n"));

    /*
     * TODO:380:M: Free applTable container data.
     */
} /* applTable_container_free */

/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int
applTable_row_prep( applTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:applTable:applTable_row_prep","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:390:o: Prepare row for request.
     * If populating row data was delayed, this is the place to
     * fill in the row for this request.
     */

    return MFD_SUCCESS;
} /* applTable_row_prep */

/** @} */
